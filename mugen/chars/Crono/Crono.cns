; Crono's constants and state file.

[Data]
;Amount of life to start with
life = 1000
attack = 100
defence = 100
fall.defence_up = 50
liedown.time = 60
airjuggle = 15
sparkno = 2
guard.sparkno = 40
KO.echo = 0
volume = 0
;Variables with this index and above will not have their values
;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.
IntPersistIndex = 59
FloatPersistIndex = 40

[Size]
xscale = 1           ;Horizontal scaling factor.
yscale = 1           ;Vertical scaling factor.
ground.back = 7     ;Player width (back, ground)
ground.front = 7    ;Player width (front, ground)
air.back = 7        ;Player width (back, air)
air.front = 7       ;Player width (front, air)
height = 19          ;Height of player (for opponent to jump over)
attack.dist = 160    ;Default attack distance
proj.attack.dist = 90 ;Default attack distance for projectiles
proj.doscale = 0     ;Set to 1 to scale projectiles too
head.pos = 1, -18   ;Approximate position of head
mid.pos = 0, -9    ;Approximate position of midsection
shadowoffset = 0     ;Number of pixels to vertically offset the shadow
draw.offset = 0,0    ;Player drawing offset in pixels (x, y). Recommended 0,0

[Velocity]
walk.fwd  = 1.7      ;Walk forward
walk.back = -1.7     ;Walk backward
run.fwd  = 3.5, 0    ;Run forward (x, y)
run.back = -3.5,-4.2 ;Hop backward (x, y)
jump.neu = 0,-6    ;Neutral jumping velocity (x, y)
jump.back = -1.5    ;Jump back Speed (x, y)
jump.fwd = 1.5       ;Jump forward Speed (x, y)
runjump.back = -1.8,-6 ;Running jump speeds (opt)
runjump.fwd = 1.8,-6      ;.
airjump.neu = 0,-6      ;.
airjump.back = -1.7      ;Air jump speeds (opt)
airjump.fwd = 1.5         ;.
air.gethit.groundrecover = -.15,-3.5  ;Velocity for ground recovery state (x, y) **MUGEN 1.0**
air.gethit.airrecover.mul = .5,.2     ;Multiplier for air recovery velocity (x, y) **MUGEN 1.0**
air.gethit.airrecover.add = 0,-4.5    ;Velocity offset for air recovery (x, y) **MUGEN 1.0**
air.gethit.airrecover.back = -1       ;Extra x-velocity for holding back during air recovery **MUGEN 1.0**
air.gethit.airrecover.fwd = 0         ;Extra x-velocity for holding forward during air recovery **MUGEN 1.0**
air.gethit.airrecover.up = -2         ;Extra y-velocity for holding up during air recovery **MUGEN 1.0**
air.gethit.airrecover.down = 1.5      ;Extra y-velocity for holding down during air recovery **MUGEN 1.0**

[Movement]
airjump.num = 1       ;Number of air jumps allowed (opt)
airjump.height = 35   ;Minimum distance from ground before you can air jump (opt)
yaccel = .45          ;Vertical acceleration
stand.friction = .85  ;Friction coefficient when standing
crouch.friction = .82 ;Friction coefficient when crouching
stand.friction.threshold = 2          ;If player's speed drops below this threshold while standing, stop his movement **MUGEN 1.0**
crouch.friction.threshold = .05       ;If player's speed drops below this threshold while crouching, stop his movement **MUGEN 1.0**
air.gethit.groundlevel = 25           ;Y-position at which a falling player is considered to hit the ground **MUGEN 1.0**
air.gethit.groundrecover.ground.threshold = -20 ;Y-position below which falling player can use the recovery command **MUGEN 1.0**
air.gethit.groundrecover.groundlevel = 10   ;Y-position at which player in the ground recovery state touches the ground **MUGEN 1.0**
air.gethit.airrecover.threshold = -1  ;Y-velocity above which player may use the air recovery command **MUGEN 1.0**
air.gethit.airrecover.yaccel = .35    ;Vertical acceleration for player in the air recovery state **MUGEN 1.0**
air.gethit.trip.groundlevel = 15      ;Y-position at which player in the tripped state touches the ground **MUGEN 1.0**
down.bounce.offset = 0, 20            ;Offset for player bouncing off the ground (x, y) **MUGEN 1.0**
down.bounce.yaccel = .4               ;Vertical acceleration for player bouncing off the ground **MUGEN 1.0**
down.bounce.groundlevel = 12          ;Y-position at which player bouncing off the ground touches the ground again **MUGEN 1.0**
down.friction.threshold = .05         ;If the player's speed drops below this threshold while lying down, stop his movement **MUGEN 1.0**

;Default language victory quotes (optional).  **MUGEN 1.0**
;If this section is included, the default language victory quotes must be in English.

[Quotes]
; Up to 100 victory quotes can be specified per language (victory0 - victory99)
victory1 = "..."

;---------------------------------------------------------------------------
; Variable usage:

; Variables 0-20 are temporary and should be reset before use.

; Var(21): Protect Timer
; Var(22): Spark Timer


;FVar(29): Spark Damage
;FVar(39): Damage Dampener
;----------------------------------------------------------------------

;---------------------------------------------------------------------------
; Overriding of common states
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

[Statedef -2]

[State -2, Dampener]
Type=VarSet
Trigger1=Roundstate<2
Trigger2=P2Stateno=[120,160]
Trigger3=enemynear,ctrl
Trigger4=P2StateType!=A
Trigger4=P2MoveType!=H
fvar(39)=1
ignorehitpause=1

[State -2]
Type = Helper
Triggerall = NumHelper(11777) = 0 ; Create the superarmor helper if it doesn't exist.
Trigger1 = NumHelper(1020) > 0
OwnPal = 1
PosType = P1
Pos = 0, 0
ID = 11777
StateNo = 11777
PauseMoveTime = 999999
SuperMoveTime = 999999
Name = "SuperArmor"

[State -2, LifeAdd]
Type = LifeAdd
Trigger1 = NumHelper(11777) > 0 ; If the superarmor helper exists, subtract taken damage from life.
Trigger1 = fVar(29) >=1
Value = -floor(fVar(29))
ignorehitpause=1

[State -2, PalFX]
type = PalFX
trigger1 = NumHelper(11777) > 0
time = 1
add = 100 + Floor(100* Sin(GameTime/10.0)) ,100 + Floor(100* Sin(GameTime/10.0)), 40 + Floor(40* Sin(GameTime/10.0))
mul = 256,256,256
invertall = 0
color = 256
ignorehitpause = 1
;persistent = 


[State -2, VarSet]
Type = VarAdd
Trigger1 = 1
FV = 29
Value = -floor(fvar(29)) ; Damage already subtracted needs to be removed from the variable
ignorehitpause=1

[State -2]
Type= NotHitBy
Trigger1= NumHelper(11777)>0 ; If the superarmor helper is active, the character cannot be hit by anything.
value=SAC

[State -2]
Type= NotHitBy
Trigger1= NumHelper(11777)>0 ; If the superarmor helper is active, the character cannot be hit by anything.
value2=SAC ; This is for safety, as another Nothitby might override the first one, so better be safe and apply it to both slots.


;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]


[State -3, Prevent Undergound Juggles]
type= targetbind
trigger1= movehit=1
trigger1= numtarget=1 && numenemy
trigger1= (target,time<=1) && (target,ID=enemynear,ID); this is just to prevent Simul issues as usual
trigger1= !(target,hitshakeover) && (target, hitfall) && (target, pos y>0)
pos= ceil(p2dist x), ceil(-pos y); keeps P2 at the same horizontal distance, but resets his Y position
ignorehitpause= 1

[State -3, Dampener]
Type = AttackMulSet
Trigger1 = 1
value = IfElse(Var(21) > 0, 0.35, fvar(39))
ignorehitpause = 1

[State -3, EndProtect]
type = VarSet
trigger1 = !Power && Var(21)
v = 21
value = 0
ignorehitpause = 1

[State -3, SuperArmorDeplete]
type = PowerAdd
trigger1 = Var(21) > 0 && StateNo != 2110 && StateNo != [2100, 2102]
value = IfElse(Power > 4, -4, -Power)
ignorehitpause = 1

[State -3: VarSet]
type = VarSet
trigger1 = (Roundstate = 3)
v = 21
value = 0

[State -3, SuperArmorDeplete]
type = VarAdd
trigger1 = Var(22) > 0
V = 22
value = -1
ignorehitpause = 1

;This controller plays a sound everytime the character lands from a jump, or
;from his back-dash.
[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = S7010, 3

[State -3, Landing Sound]
type = PlaySnd
triggerall = stateno = 100 
trigger1 = (AnimElemTime(2) = 1)
trigger2 = (AnimElemTime(5) = 1)
value = S7010, 3

[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 50 ;Jump 
trigger1 = (PrevStateNo != [200,1099]) && (PrevStateNo != [2000,2099])
trigger2 = stateno = 105 ;Run-back
value = S7010, 5

