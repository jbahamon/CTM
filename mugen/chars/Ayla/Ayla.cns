; Ayla's constants and state file.

[Data]
;Amount of life to start with
life = 1000
attack = 100
defence = 100
fall.defence_up = 50
liedown.time = 60
airjuggle = 20
sparkno = 2
guard.sparkno = 40
KO.echo = 0
volume = 0
;Variables with this index and above will not have their values
;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.
IntPersistIndex = 60
FloatPersistIndex = 40

[Size]
xscale = 1           ;Horizontal scaling factor.
yscale = 1           ;Vertical scaling factor.
ground.back = 10     ;Player width (back, ground)
ground.front = 10    ;Player width (front, ground)
air.back = 10        ;Player width (back, air)
air.front = 10       ;Player width (front, air)
height = 19          ;Height of player (for opponent to jump over)
attack.dist = 160    ;Default attack distance
proj.attack.dist = 90 ;Default attack distance for projectiles
proj.doscale = 0     ;Set to 1 to scale projectiles too
head.pos = 3, -21   ;Approximate position of head
mid.pos = 0, -15    ;Approximate position of midsection
shadowoffset = 0     ;Number of pixels to vertically offset the shadow
draw.offset = 0,0    ;Player drawing offset in pixels (x, y). Recommended 0,0

[Velocity]
walk.fwd  = 1.8      ;Walk forward
walk.back = -1.8     ;Walk backward
run.fwd  = 4.4, 0    ;Run forward (x, y)
run.back = -4.4,-4.2 ;Hop backward (x, y)
jump.neu = 0,-7.3    ;Neutral jumping velocity (x, y)
jump.back = -2    ;Jump back Speed (x, y)
jump.fwd = 2       ;Jump forward Speed (x, y)
runjump.back = -2,-7.5 ;Running jump speeds (opt)
runjump.fwd = 4,-7.5      ;.
airjump.neu = 0,-7.5      ;.
airjump.back = -2.55      ;Air jump speeds (opt)
airjump.fwd = 2.5         ;.
air.gethit.groundrecover = -.15,-3.5  ;Velocity for ground recovery state (x, y) **MUGEN 1.0**
air.gethit.airrecover.mul = .5,.2     ;Multiplier for air recovery velocity (x, y) **MUGEN 1.0**
air.gethit.airrecover.add = 0,-4.5    ;Velocity offset for air recovery (x, y) **MUGEN 1.0**
air.gethit.airrecover.back = -1       ;Extra x-velocity for holding back during air recovery **MUGEN 1.0**
air.gethit.airrecover.fwd = 0         ;Extra x-velocity for holding forward during air recovery **MUGEN 1.0**
air.gethit.airrecover.up = -2         ;Extra y-velocity for holding up during air recovery **MUGEN 1.0**
air.gethit.airrecover.down = 1.5      ;Extra y-velocity for holding down during air recovery **MUGEN 1.0**

[Movement]
airjump.num = 1       ;Number of air jumps allowed (opt)
airjump.height = 35   ;Minimum distance from ground before you can air jump (opt)
yaccel = .49          ;Vertical acceleration
stand.friction = .85  ;Friction coefficient when standing
crouch.friction = .82 ;Friction coefficient when crouching
stand.friction.threshold = 2          ;If player's speed drops below this threshold while standing, stop his movement **MUGEN 1.0**
crouch.friction.threshold = .05       ;If player's speed drops below this threshold while crouching, stop his movement **MUGEN 1.0**
air.gethit.groundlevel = 25           ;Y-position at which a falling player is considered to hit the ground **MUGEN 1.0**
air.gethit.groundrecover.ground.threshold = -20 ;Y-position below which falling player can use the recovery command **MUGEN 1.0**
air.gethit.groundrecover.groundlevel = 10   ;Y-position at which player in the ground recovery state touches the ground **MUGEN 1.0**
air.gethit.airrecover.threshold = -1  ;Y-velocity above which player may use the air recovery command **MUGEN 1.0**
air.gethit.airrecover.yaccel = .35    ;Vertical acceleration for player in the air recovery state **MUGEN 1.0**
air.gethit.trip.groundlevel = 15      ;Y-position at which player in the tripped state touches the ground **MUGEN 1.0**
down.bounce.offset = 0, 20            ;Offset for player bouncing off the ground (x, y) **MUGEN 1.0**
down.bounce.yaccel = .4               ;Vertical acceleration for player bouncing off the ground **MUGEN 1.0**
down.bounce.groundlevel = 12          ;Y-position at which player bouncing off the ground touches the ground again **MUGEN 1.0**
down.friction.threshold = .05         ;If the player's speed drops below this threshold while lying down, stop his movement **MUGEN 1.0**

;Default language victory quotes (optional).  **MUGEN 1.0**
;If this section is included, the default language victory quotes must be in English.

[Quotes]
; Up to 100 victory quotes can be specified per language (victory0 - victory99)
victory1 = "Ayla fight while alive! Win and live. Lose and die. Rule of life. No change rule."
victory2 = "Me no run! Ayla no run away!\nWorse than losing!!"
victory3 = "No more do bad stuff, okay?!\nThat wrong!"
victory4 = "Ha ha, you funny.\nAyla like funny people."
victory5 = "Strong survive.\nAyla strong. Ayla fight!"

;Against Lavos
victory6 = "Ayla strong! Ayla and world good!\nYou outsider. Not part of planet's life!!"

;Against Frog
victory7 = "Yummy frog!\nFor Ayla eat?"

; Against Lucca
victory8 = "You strong too.\nAyla respect strong people.  Men and women."

; Against Crono
victory9 = "Ayla like strong people.\nSo Ayla like Crono!"

; Against Marle
victory10 = "Sure you ready leave nest?\nNot too big yet."

; Against Ayla
victory11 = "What you say?!\nNo rubbish or Ayla, head go boom!"

;Against Robo
victory12 = "You different, but strong too."
victory13 = "«Rawboot?» What that?\nAyla don't know."

;---------------------------------------------------------------------------
; Variable usage:

; Variables 0-20 are temporary and should be reset before use.
; Var(20): Custom Combo timer
;----------------------------------------------------------------------

;---------------------------------------------------------------------------
; Overriding of custom states
;---------------------------------------------------------------------------

[Statedef 0]
type = S
physics = S
sprpriority = 0
     
[State 0, 1]
type = ChangeAnim
trigger1 = Anim != 0 && Anim != 5
trigger2 = Anim = 5 && AnimTime = 0 ;Turn anim over
value = 0
     
[State 0, 2]
type = VelSet
trigger1 = Time = 0
y = 0
     
[State 0, 3] ;Stop moving if low velocity or 4 ticks pass
type = VelSet
trigger1 = abs(vel x) < 2
trigger2 = Time = 4
x = 0

[State 0: ChangeState]
type = ChangeState
trigger1 = (Var(21) > 0)
value = 2111
ctrl = 1

;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

[Statedef -2]

[State -2, Dampener]
Type=VarSet
Trigger1=Roundstate<2
Trigger2=P2Stateno=[120,160]
Trigger3=enemynear,ctrl
Trigger4=P2StateType!=A
Trigger4=P2MoveType!=H
fvar(39)=1
ignorehitpause=1

;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]

[State -3, Prevent Undergound Juggles]
type= targetbind
triggerall= StateNo != [2010, 2014]
trigger1= movehit=1
trigger1= numtarget=1 && numenemy
trigger1= (target,time<=1) && (target,ID=enemynear,ID); this is just to prevent Simul issues as usual
trigger1= !(target,hitshakeover) && (target, hitfall) && (target, pos y>0)
pos= ceil(p2dist x), ceil(-pos y); keeps P2 at the same horizontal distance, but resets his Y position
ignorehitpause= 1

[State -3: AttackMulSet]
type = RemapPal
trigger1 = Var(21) > 0
trigger1 = !Power && StateNo != [2100, 2102]
trigger1 = !(var(21) := 0)
source = 1, 1
dest = 1, palno

[State -3: AttackMulSet]
type = RemapPal
trigger1 = (Var(21) != 0)
trigger1 = Power >= 3000
source = 1, 1
dest = 2, palno

[State -3, CustomCombo]
type = PowerAdd
trigger1 = Var(21) > 0 && StateNo != 2110 && StateNo != [2100, 2102]
value = IfElse(Power > 10, -10, -Power)
ignorehitpause = 1

[State -3: VarSet]
type = VarSet
trigger1 = (Roundstate = 3)
v = 21
value = 0

[State -3: PalFX]
type = PalFX
trigger1 = (Var(21) > 0) && ((GameTime%3) = 0)
time = 2
add = 132,16,0
sinadd = 164,32,5,2
ignorehitpause = 1

[State -3: AssertSpecial]
type = AssertSpecial
trigger1 = (Var(21) > 0)
flag = NoJuggleCheck

[State -3: ChangeAnim]
type = ChangeAnim
triggerall = (Var(21) > 0) && (RoundState = 2) && (MoveType != H) && StateNo != [2100, 2102]
trigger1 = AnimElemTime(AnimElemNo(0) + 1) < 0
trigger1 = AnimElemTime(AnimElemNo(0)) > floor ((AnimElemTime(AnimElemNo(0)) - AnimElemTime(AnimElemNo(0) + 1))/2)
ignorehitpause = 1
value = Anim
elem = AnimElemNo(0) + 1

[State -3, Dampener]
Type = AttackMulSet
Trigger1 = 1
value = IfElse(Var(21) > 0, 0.72, fvar(39))
ignorehitpause = 1

;This controller plays a sound everytime Ayla lands from a jump, or
;from his back-dash.
[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = S7010, 3

[State -3, Landing Sound]
type = PlaySnd
trigger1 = stateno = 100 && (AnimElemTime(1) = 1)
value = S7010, 4

[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 50 ;Jump 
trigger1 = (PrevStateNo != [200,1099]) && (PrevStateNo != [2000,2099])
trigger2 = stateno = 105 ;Run-back
value = S7010, 5

