; Robo's constants and state file.

[Data]
;Amount of life to start with
life = 1000
;attack power (more is stronger)
attack = 100
;defensive power (more is stronger)
defence = 100
;Percentage to increase defense everytime player is knocked down
fall.defence_up = 50
;Time which player lies down for, before getting up
liedown.time = 60
;Number of points for juggling
airjuggle = 20
;Default hit spark number for HitDefs
sparkno = 2
;Default guard spark number
guard.sparkno = 40
;1 to enable echo on KO
KO.echo = 0
;Volume offset (negative for softer)
volumescale = 120
;Variables with this index and above will not have their values
;reset to 0 between rounds or matches. There are 60 int variables,
;indexed from 0 to 59, and 40 float variables, indexed from 0 to 39.
;If omitted, then it defaults to 60 and 40 for integer and float
;variables repectively, meaning that none are persistent, i.e. all
;are reset. If you want your variables to persist between matches,
;you need to override state 5900 from common1.cns.
IntPersistIndex = 60
FloatPersistIndex = 40

[Size]
xscale = 1           ;Horizontal scaling factor.
yscale = 1           ;Vertical scaling factor.
ground.back = 10     ;Player width (back, ground)
ground.front = 10    ;Player width (front, ground)
air.back = 10        ;Player width (back, air)
air.front = 10       ;Player width (front, air)
height = 19          ;Height of player (for opponent to jump over)
attack.dist = 160    ;Default attack distance
proj.attack.dist = 90 ;Default attack distance for projectiles
proj.doscale = 0     ;Set to 1 to scale projectiles too
head.pos = 0, -25   ;Approximate position of head
mid.pos = 1, -10    ;Approximate position of midsection
shadowoffset = 0     ;Number of pixels to vertically offset the shadow
draw.offset = 0,0    ;Player drawing offset in pixels (x, y). Recommended 0,0

[Velocity]
walk.fwd  = 1.5      ;Walk forward
walk.back = -1.5     ;Walk backward
run.fwd  = 2.5, 0    ;Run forward (x, y)
run.back = -2.5,-4 ;Hop backward (x, y)
jump.neu = 0,-4.2    ;Neutral jumping velocity (x, y)
jump.back = -2.5, -2.6    ;Jump back Speed (x, y)
jump.fwd = 2.5, -3.2       ;Jump forward Speed (x, y)
runjump.back = -3,-3.5 ;Running jump speeds (opt)
runjump.fwd = 3,-3.5     ;.
airjump.neu = 0,-3.5      ;.
airjump.back = -3      ;Air jump speeds (opt)
airjump.fwd = 3         ;.
air.gethit.groundrecover = -.15,-3.5  ;Velocity for ground recovery state (x, y) **MUGEN 1.0**
air.gethit.airrecover.mul = .5,.2     ;Multiplier for air recovery velocity (x, y) **MUGEN 1.0**
air.gethit.airrecover.add = 0,-4.5    ;Velocity offset for air recovery (x, y) **MUGEN 1.0**
air.gethit.airrecover.back = -1       ;Extra x-velocity for holding back during air recovery **MUGEN 1.0**
air.gethit.airrecover.fwd = 0         ;Extra x-velocity for holding forward during air recovery **MUGEN 1.0**
air.gethit.airrecover.up = -2         ;Extra y-velocity for holding up during air recovery **MUGEN 1.0**
air.gethit.airrecover.down = 1.5      ;Extra y-velocity for holding down during air recovery **MUGEN 1.0**

[Movement]
airjump.num = 1       ;Number of air jumps allowed (opt)
airjump.height = 20   ;Minimum distance from ground before you can air jump (opt)
yaccel = .4          ;Vertical acceleration
stand.friction = .85	  ;Friction coefficient when standing
crouch.friction = .82 ;Friction coefficient when crouching
stand.friction.threshold = 2          ;If player's speed drops below this threshold while standing, stop his movement **MUGEN 1.0**
crouch.friction.threshold = .05       ;If player's speed drops below this threshold while crouching, stop his movement **MUGEN 1.0**
air.gethit.groundlevel = 25           ;Y-position at which a falling player is considered to hit the ground **MUGEN 1.0**
air.gethit.groundrecover.ground.threshold = -20 ;Y-position below which falling player can use the recovery command **MUGEN 1.0**
air.gethit.groundrecover.groundlevel = 10   ;Y-position at which player in the ground recovery state touches the ground **MUGEN 1.0**
air.gethit.airrecover.threshold = -1  ;Y-velocity above which player may use the air recovery command **MUGEN 1.0**
air.gethit.airrecover.yaccel = .35    ;Vertical acceleration for player in the air recovery state **MUGEN 1.0**
air.gethit.trip.groundlevel = 15      ;Y-position at which player in the tripped state touches the ground **MUGEN 1.0**
down.bounce.offset = 0, 20            ;Offset for player bouncing off the ground (x, y) **MUGEN 1.0**
down.bounce.yaccel = .4               ;Vertical acceleration for player bouncing off the ground **MUGEN 1.0**
down.bounce.groundlevel = 12          ;Y-position at which player bouncing off the ground touches the ground again **MUGEN 1.0**
down.friction.threshold = .05         ;If the player's speed drops below this threshold while lying down, stop his movement **MUGEN 1.0**

;Default language victory quotes (optional).  **MUGEN 1.0**
;If this section is included, the default language victory quotes must be in English.
[Quotes]
; Up to 100 victory quotes can be specified per language (victory0 - victory99)
victory1 = "I have come to think that someone,\n or something wanted us to see all this."
victory2 = "I'm sorry but... I cannot afford to lose anything else...\nNot my precious memories, or my irreplaceable friends."
victory3 = "Together, maybe we can give this \n planet of ours a chance."
victory4 = "Our journey may come to an end when we finally discover the\n identify of the Entity."
victory5 = "The new future has a place for me!"

;Against Lavos
victory6 = "I am no different than Lucca and the others... \nI am a part of all living things!!"

;Against Frog
victory7 = "So!\nThe Masamune is not just a myth..."

; Against Lucca
victory8 = "Lucca, YOU have taught me these emotions.  Thank you."

; Against Crono
victory9 = "You... are trying to save our\n world?"

; Against Marle
victory10 = "Please calm down.\nThis isn't like you at all."

; Against Ayla
victory11 = "Miss Ayla, please do not\n promote violence."

;---------------------------------------------------------------------------
; Variable usage:

; Variables 0-20 are temporary and should be reset before use.
; Var 21 = Fuel
; Var 22 = Electrocute
; Var 23 = Super Armor
;---------------------------------------------------------------------------



;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

[Statedef -2]

[State -2, Dampener]
Type=VarSet
Trigger1=Roundstate<2
Trigger2=P2Stateno=[120,160]
Trigger3=enemynear,ctrl
Trigger4=P2StateType!=A
Trigger4=P2MoveType!=H
fvar(39)=1
ignorehitpause=1


;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]

[State -3, Prevent Undergound Juggles]
type= targetbind
trigger1= movehit=1
trigger1= numtarget=1 && numenemy
trigger1= (target,time<=1) && (target,ID=enemynear,ID); this is just to prevent Simul issues as usual
trigger1= !(target,hitshakeover) && (target, hitfall) && (target, pos y>0)
pos= ceil(p2dist x), ceil(-pos y); keeps P2 at the same horizontal distance, but resets his Y position
ignorehitpause= 1

[State -3, Meter]
type = Helper
trigger1 = !NumHelper(7200)
name = "Fuel Meter"
ID = 7200
stateno = 7200
pos = 10,0
postype = p1    ;p2,front,back,left,right
facing = 1
ownpal = 1

[State -3, Electrocute]
type = VarSet
trigger1 = Var(22) > 0 && !Power && StateNo != 2100 && StateNo != 2200
trigger1 = !(var(21) := 0)
var(22) = 0

[State -3, Dampener]
Type = AttackMulSet
Trigger1 = 1
value = IfElse(Var(22) > 0, 0.5, fvar(39))
ignorehitpause = 1

[State -3, Electrocute]
type = PowerAdd
trigger1 = Var(22) > 0 && StateNo != 2100
value = -7
ignorehitpause = 1

[State -3: VarSet]
type = VarSet
trigger1 = (Roundstate = 3)
v = 22
value = 0

[State -3, Berserker]
type = VarSet
trigger1 = Var(22) > 0 
var(21) = 100

[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = S8,0

[State -3, Fuel]
type = VarAdd
trigger1 = RoundState = 2
trigger1 = Statetype != A
trigger1 = var(21) < 100 && (GameTime % 3 > 0)
var(21) = 1

[State -3, Landing Sound]
type = PlaySnd
triggerall = stateno = 100 
trigger1 = (AnimElemTime(1) = 1)
trigger2 = (AnimElemTime(3) = 1)
value = S8,2

[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 50 ;Jump 
trigger1 = (PrevStateNo != [200,1099]) && (PrevStateNo != [2000,2099])
trigger2 = stateno = 105 ;Run-back
value = S1,2
volumescale = 35
